import {readAsArrayBuffer} from './asyncReader';
import {getAsset} from './prepareAssets';
import {normalize} from './helpers';
import {$crud} from "../factories/CrudFactory";
import {generateFormData} from "../helpers";

let updatedPdfBytes;

export async function save(
    pdfFile: any,
    objects: Attachments[],
    name: string,
    fileName?: string,
    fileId?: any
) {
    let b;
    const PDFLib = await getAsset('PDFLib');
    const download = await getAsset('download');
    let pdfDoc: {
        getPages: () => any[];
        embedFont: (arg0: unknown) => any;
        embedJpg: (arg0: unknown) => any;
        embedPng: (arg0: unknown) => any;
        embedPdf: (arg0: any) => [any] | PromiseLike<[any]>;
        save: () => any;
    };

    try {
        await fetch(pdfFile).then((res) => res.blob()).then(r => b = r);
        pdfDoc = await PDFLib.PDFDocument.load(await readAsArrayBuffer(b));
    } catch (e) {
        console.log('Failed to load PDF.');
        throw e;
    }

    const pagesProcesses = pdfDoc.getPages().map(async (page, pageIndex) => {
        const pageObjects = objects[pageIndex];
        // 'y' starts from bottom in PDFLib, use this to calculate y
        const pageHeight = page.getHeight();
        const embedProcesses = pageObjects.map(async (object: Attachment) => {
            if (object.type === 'image') {
                const {file, x, y, width, height} = object as ImageAttachment;
                let img: any;
                try {
                    if (file.type === 'image/jpeg') {
                        img = await pdfDoc.embedJpg(await readAsArrayBuffer(file));
                    } else {
                        img = await pdfDoc.embedPng(await readAsArrayBuffer(file));
                    }
                    return () =>
                        page.drawImage(img, {
                            x,
                            y: pageHeight - y - height,
                            width,
                            height,
                        });
                } catch (e) {
                    console.log('Failed to embed image.', e);
                    throw e;
                }
            } else if (object.type === 'drawing') {
                const {
                    x,
                    y,
                    path,
                    scale,
                    stroke,
                    strokeWidth,
                } = object as DrawingAttachment;
                const {
                    pushGraphicsState,
                    setLineCap,
                    popGraphicsState,
                    setLineJoin,
                    LineCapStyle,
                    LineJoinStyle,
                    rgb,
                } = PDFLib;
                return () => {
                    page.pushOperators(
                        pushGraphicsState(),
                        setLineCap(LineCapStyle.Round),
                        setLineJoin(LineJoinStyle.Round)
                    );

                    const color = window.w3color(stroke!).toRgb();

                    page.drawSvgPath(path, {
                        borderColor: rgb(
                            normalize(color.r),
                            normalize(color.g),
                            normalize(color.b)
                        ),
                        borderWidth: strokeWidth,
                        scale,
                        x,
                        y: pageHeight - y,
                    });
                    page.pushOperators(popGraphicsState());
                };
            }
        });
        const {
            rgb,
        } = PDFLib;
        const svg = `<svg width="233" height="16" viewBox="0 0 233 16" fill="none">
<path d="M6.44673 9.87074V4.18182H8.76065V14H6.51705V12.255H6.41477C6.19318 12.8047 5.82884 13.2543 5.32173 13.6037C4.81889 13.9531 4.19886 14.1278 3.46165 14.1278C2.81818 14.1278 2.24929 13.9851 1.75497 13.6996C1.26491 13.4098 0.881392 12.9901 0.604403 12.4403C0.327415 11.8864 0.188921 11.2173 0.188921 10.4332V4.18182H2.50284V10.0753C2.50284 10.6974 2.6733 11.1918 3.0142 11.5582C3.35511 11.9247 3.80256 12.108 4.35653 12.108C4.69744 12.108 5.0277 12.0249 5.3473 11.8587C5.6669 11.6925 5.92898 11.4453 6.13352 11.1172C6.34233 10.7848 6.44673 10.3693 6.44673 9.87074ZM18.9 6.77699L16.7907 7.0071C16.731 6.79403 16.6266 6.59375 16.4775 6.40625C16.3326 6.21875 16.1365 6.06747 15.8894 5.95241C15.6422 5.83736 15.3397 5.77983 14.9817 5.77983C14.5002 5.77983 14.0953 5.88423 13.7672 6.09304C13.4434 6.30185 13.2836 6.57244 13.2878 6.90483C13.2836 7.19034 13.388 7.42259 13.601 7.60156C13.8184 7.78054 14.1763 7.92756 14.6749 8.04261L16.3496 8.40057C17.2786 8.60085 17.9689 8.91832 18.4206 9.35298C18.8766 9.78764 19.1067 10.3565 19.111 11.0597C19.1067 11.6776 18.9256 12.223 18.5676 12.696C18.214 13.1648 17.7218 13.5312 17.0911 13.7955C16.4604 14.0597 15.736 14.1918 14.9178 14.1918C13.7161 14.1918 12.7488 13.9403 12.0158 13.4375C11.2828 12.9304 10.8461 12.2251 10.7054 11.3217L12.9618 11.1044C13.0641 11.5476 13.2814 11.8821 13.6138 12.108C13.9462 12.3338 14.3787 12.4467 14.9114 12.4467C15.4611 12.4467 15.9022 12.3338 16.2346 12.108C16.5712 11.8821 16.7395 11.603 16.7395 11.2706C16.7395 10.9893 16.6309 10.7571 16.4135 10.5739C16.2005 10.3906 15.8681 10.25 15.4164 10.152L13.7417 9.80043C12.7999 9.6044 12.1032 9.27415 11.6515 8.80966C11.1998 8.34091 10.976 7.74858 10.9803 7.03267C10.976 6.42756 11.1401 5.90341 11.4725 5.46023C11.8091 5.01278 12.2757 4.66761 12.8723 4.42472C13.4732 4.17756 14.1657 4.05398 14.9498 4.05398C16.1003 4.05398 17.0059 4.29901 17.6664 4.78906C18.3311 5.27912 18.7424 5.94176 18.9 6.77699ZM25.3656 14.1918C24.3812 14.1918 23.5311 13.9872 22.8152 13.5781C22.1035 13.1648 21.5559 12.581 21.1724 11.8267C20.7889 11.0682 20.5971 10.1754 20.5971 9.14844C20.5971 8.13849 20.7889 7.25213 21.1724 6.48935C21.5602 5.7223 22.1014 5.12571 22.796 4.69957C23.4906 4.26918 24.3066 4.05398 25.2441 4.05398C25.8493 4.05398 26.4203 4.15199 26.9572 4.34801C27.4984 4.53977 27.9757 4.83807 28.389 5.2429C28.8066 5.64773 29.1348 6.16335 29.3734 6.78977C29.612 7.41193 29.7314 8.15341 29.7314 9.0142V9.72372H21.6838V8.16406H27.5133C27.5091 7.72088 27.4132 7.3267 27.2257 6.98153C27.0382 6.6321 26.7761 6.35724 26.4395 6.15696C26.1071 5.95668 25.7193 5.85653 25.2761 5.85653C24.8031 5.85653 24.3876 5.97159 24.0297 6.2017C23.6717 6.42756 23.3926 6.72585 23.1923 7.09659C22.9963 7.46307 22.8961 7.86577 22.8919 8.30469V9.66619C22.8919 10.2372 22.9963 10.7273 23.2051 11.1364C23.4139 11.5412 23.7058 11.8523 24.0808 12.0696C24.4558 12.2827 24.8947 12.3892 25.3976 12.3892C25.7342 12.3892 26.0389 12.3423 26.3116 12.2486C26.5843 12.1506 26.8208 12.0078 27.0211 11.8203C27.2214 11.6328 27.3727 11.4006 27.475 11.1236L29.6355 11.3665C29.4991 11.9375 29.2392 12.4361 28.8556 12.8622C28.4764 13.2841 27.9906 13.6122 27.3983 13.8466C26.8059 14.0767 26.1284 14.1918 25.3656 14.1918ZM31.6889 14V4.18182H33.9325V5.81818H34.0348C34.2138 5.25142 34.5206 4.81463 34.9553 4.50781C35.3942 4.19673 35.8949 4.04119 36.4574 4.04119C36.5852 4.04119 36.728 4.04758 36.8857 4.06037C37.0476 4.06889 37.1818 4.08381 37.2884 4.10511V6.23366C37.1903 6.19957 37.0348 6.16974 36.8217 6.14418C36.6129 6.11435 36.4105 6.09943 36.2145 6.09943C35.7926 6.09943 35.4134 6.19105 35.0767 6.37429C34.7443 6.55327 34.4822 6.80256 34.2905 7.12216C34.0987 7.44176 34.0028 7.81037 34.0028 8.22798V14H31.6889ZM41.2994 0.909091V14H38.9279V0.909091H41.2994ZM48.3034 14H43.8674V0.909091H48.3929C49.6926 0.909091 50.8091 1.17116 51.7424 1.69531C52.6799 2.2152 53.4 2.96307 53.9029 3.93892C54.4057 4.91477 54.6571 6.08239 54.6571 7.44176C54.6571 8.8054 54.4036 9.97727 53.8965 10.9574C53.3936 11.9375 52.6671 12.6896 51.7168 13.2138C50.7708 13.7379 49.633 14 48.3034 14ZM46.2388 11.9482H48.1884C49.1003 11.9482 49.861 11.782 50.4703 11.4496C51.0797 11.1129 51.5378 10.6122 51.8446 9.94744C52.1515 9.27841 52.3049 8.44318 52.3049 7.44176C52.3049 6.44034 52.1515 5.60937 51.8446 4.94886C51.5378 4.28409 51.084 3.78764 50.4831 3.45952C49.8865 3.12713 49.1451 2.96094 48.2587 2.96094H46.2388V11.9482ZM61.4311 0.295454L57.2124 15.9688H55.1861L59.4048 0.295454H61.4311ZM63.0099 14V0.909091H67.919C68.9247 0.909091 69.7685 1.09659 70.4503 1.47159C71.1364 1.84659 71.6541 2.36222 72.0036 3.01847C72.3572 3.67045 72.5341 4.41193 72.5341 5.2429C72.5341 6.08239 72.3572 6.82812 72.0036 7.48011C71.6499 8.1321 71.1278 8.6456 70.4375 9.0206C69.7472 9.39134 68.897 9.5767 67.8871 9.5767H64.6335V7.62713H67.5675C68.1555 7.62713 68.6371 7.52486 69.0121 7.32031C69.3871 7.11577 69.6641 6.83452 69.843 6.47656C70.0263 6.11861 70.1179 5.70739 70.1179 5.2429C70.1179 4.77841 70.0263 4.36932 69.843 4.01562C69.6641 3.66193 69.3849 3.38707 69.0057 3.19105C68.6307 2.99077 68.147 2.89062 67.5547 2.89062H65.3814V14H63.0099ZM79.03 14H74.5939V0.909091H79.1195C80.4192 0.909091 81.5357 1.17116 82.4689 1.69531C83.4064 2.2152 84.1266 2.96307 84.6294 3.93892C85.1323 4.91477 85.3837 6.08239 85.3837 7.44176C85.3837 8.8054 85.1301 9.97727 84.623 10.9574C84.1202 11.9375 83.3936 12.6896 82.4434 13.2138C81.4973 13.7379 80.3596 14 79.03 14ZM76.9654 11.9482H78.915C79.8269 11.9482 80.5875 11.782 81.1969 11.4496C81.8063 11.1129 82.2644 10.6122 82.5712 9.94744C82.878 9.27841 83.0314 8.44318 83.0314 7.44176C83.0314 6.44034 82.878 5.60937 82.5712 4.94886C82.2644 4.28409 81.8105 3.78764 81.2097 3.45952C80.6131 3.12713 79.8716 2.96094 78.9853 2.96094H76.9654V11.9482ZM87.6369 14V0.909091H96.0233V2.89702H90.0083V6.45099H95.448V8.43892H90.0083V14H87.6369ZM113.854 5.32599H111.463C111.395 4.93395 111.269 4.58665 111.086 4.28409C110.903 3.97727 110.675 3.71733 110.402 3.50426C110.129 3.29119 109.818 3.13139 109.469 3.02486C109.124 2.91406 108.751 2.85866 108.35 2.85866C107.639 2.85866 107.008 3.03764 106.458 3.3956C105.909 3.74929 105.478 4.26918 105.167 4.95526C104.856 5.63707 104.7 6.47017 104.7 7.45455C104.7 8.45597 104.856 9.29972 105.167 9.9858C105.482 10.6676 105.913 11.1832 106.458 11.5327C107.008 11.8778 107.637 12.0504 108.344 12.0504C108.736 12.0504 109.102 11.9993 109.443 11.897C109.789 11.7905 110.097 11.6349 110.37 11.4304C110.647 11.2259 110.879 10.9744 111.067 10.6761C111.259 10.3778 111.391 10.0369 111.463 9.65341L113.854 9.66619C113.764 10.2884 113.57 10.8722 113.272 11.4176C112.978 11.9631 112.593 12.4446 112.115 12.8622C111.638 13.2756 111.08 13.5994 110.441 13.8338C109.801 14.0639 109.092 14.179 108.312 14.179C107.161 14.179 106.134 13.9126 105.231 13.38C104.328 12.8473 103.616 12.0781 103.096 11.0724C102.576 10.0668 102.316 8.8608 102.316 7.45455C102.316 6.04403 102.578 4.83807 103.102 3.83665C103.627 2.83097 104.34 2.06179 105.244 1.52912C106.147 0.996448 107.17 0.730113 108.312 0.730113C109.041 0.730113 109.718 0.832386 110.345 1.03693C110.971 1.24148 111.529 1.5419 112.019 1.93821C112.509 2.33026 112.912 2.81179 113.227 3.38281C113.547 3.94957 113.756 4.5973 113.854 5.32599ZM116.026 14V0.909091H120.935C121.94 0.909091 122.784 1.08381 123.466 1.43324C124.152 1.78267 124.67 2.27273 125.019 2.90341C125.373 3.52983 125.55 4.26065 125.55 5.09588C125.55 5.93537 125.371 6.66406 125.013 7.28196C124.659 7.8956 124.137 8.37074 123.447 8.70739C122.756 9.03977 121.908 9.20597 120.903 9.20597H117.406V7.23722H120.583C121.171 7.23722 121.653 7.15625 122.028 6.99432C122.403 6.82812 122.68 6.58736 122.859 6.27202C123.042 5.95241 123.134 5.56037 123.134 5.09588C123.134 4.63139 123.042 4.23509 122.859 3.90696C122.675 3.57457 122.396 3.32315 122.021 3.1527C121.646 2.97798 121.163 2.89062 120.57 2.89062H118.397V14H116.026ZM122.788 8.06818L126.029 14H123.383L120.2 8.06818H122.788ZM127.733 14V0.909091H136.247V2.89702H130.104V6.45099H135.806V8.43892H130.104V12.0121H136.298V14H127.733ZM140.347 14H137.816L142.425 0.909091H145.352L149.967 14H147.436L143.94 3.59375H143.837L140.347 14ZM140.43 8.86719H147.334V10.772H140.43V8.86719ZM149.534 2.89702V0.909091H159.979V2.89702H155.933V14H153.58V2.89702H149.534ZM161.992 14V0.909091H170.507V2.89702H164.364V6.45099H170.066V8.43892H164.364V12.0121H170.558V14H161.992ZM177.362 14H172.926V0.909091H177.452C178.751 0.909091 179.868 1.17116 180.801 1.69531C181.738 2.2152 182.459 2.96307 182.961 3.93892C183.464 4.91477 183.716 6.08239 183.716 7.44176C183.716 8.8054 183.462 9.97727 182.955 10.9574C182.452 11.9375 181.726 12.6896 180.775 13.2138C179.829 13.7379 178.692 14 177.362 14ZM175.297 11.9482H177.247C178.159 11.9482 178.92 11.782 179.529 11.4496C180.138 11.1129 180.596 10.6122 180.903 9.94744C181.21 9.27841 181.363 8.44318 181.363 7.44176C181.363 6.44034 181.21 5.60937 180.903 4.94886C180.596 4.28409 180.143 3.78764 179.542 3.45952C178.945 3.12713 178.204 2.96094 177.317 2.96094H175.297V11.9482ZM189.858 2.89702V0.909091H200.303V2.89702H196.257V14H193.905V2.89702H189.858ZM204.688 0.909091V14H202.317V0.909091H204.688ZM207.256 0.909091H210.158L214.044 10.3949H214.198L218.084 0.909091H220.986V14H218.711V5.00639H218.589L214.971 13.9616H213.271L209.653 4.98722H209.532V14H207.256V0.909091ZM223.569 14V0.909091H232.083V2.89702H225.94V6.45099H231.642V8.43892H225.94V12.0121H232.134V14H223.569Z" fill="black"/>
</svg>`;
        page.drawSvgPath(svg, {
            x: 20,
            y: 50,
            scale: 1,
            borderWidth: 0,
            borderColor: rgb(normalize(0), normalize(0), normalize(0))
        });
        // embed objects in order
        const drawProcesses: any[] = await Promise.all(embedProcesses);
        drawProcesses.forEach((p) => p());
    });
    await Promise.all(pagesProcesses);
    try {
        updatedPdfBytes = await pdfDoc.save()
        await $crud.put("file/update-file",
            generateFormData({
                filename: updatedPdfBytes,
                docname: fileName,
                fileId: fileId,
            })
        );
    } catch (e) {
        console.log('Failed to save PDF.');
        throw e;
    }
}

export async function downloadPdf() {
    const download = await getAsset('download');
    download(updatedPdfBytes, name, 'application/pdf');
}